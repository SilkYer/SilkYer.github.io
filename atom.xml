<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SilkYer&#39;s Blog</title>
  <subtitle>Write the code , Change the world</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://silkyer.github.io/"/>
  <updated>2017-05-18T13:52:33.559Z</updated>
  <id>https://silkyer.github.io/</id>
  
  <author>
    <name>SilkYer</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CSS 选择器</title>
    <link href="https://silkyer.github.io/2017/05/18/CSS-selector/"/>
    <id>https://silkyer.github.io/2017/05/18/CSS-selector/</id>
    <published>2017-05-18T10:43:13.086Z</published>
    <updated>2017-05-18T13:52:33.559Z</updated>
    
    <content type="html"><![CDATA[<p>CSS 选择器种类繁多,其中几个长得还比较像,如果有的属性用的不多,一会就忘记了,特别是CSS3中的:nth选择器,那么从现在开始从头一起来看看CSS选择器的运用。</p>
<p>CSS是一种用于屏幕上渲染html，xml等一种语言，CSS主要是在相应的元素中应用样式，来渲染相对应用的元素，那么这样我们选择相应的元素就很重要了，如何选择对应的元素，此时就需要我们所说的选择器。选择器主要是用来确定html的树形结构中的DOM元素节点。我把CSS选择器分开成三部分，第一部分是我们常用的部分，我把他叫做基本选择器；第二部分我把他称作是属性选择器，第三部分我把他称作伪类选择器，这一部分也是最难理解和掌握的部分，先来看第一部分——基本选择器。</p>
<p>为了更好的说明问题，先创建一个简单的DOM结构，如下：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-18/34676936-file_1495112689269_4ab7.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>加些CSS,效果如下所示：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-18/91885059-file_1495112730528_cc79.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h2><h3 id="通配符选择器（＊）"><a href="#通配符选择器（＊）" class="headerlink" title="通配符选择器（＊）"></a>通配符选择器（＊）</h3><p>我们平常不加reset.css的时候 都会加上</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">	* &#123;</div><div class="line">	margin: 0;</div><div class="line">	padding: 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>所有浏览器支持通配符选择器。</p>
</blockquote>
<h3 id="元素选择器-E"><a href="#元素选择器-E" class="headerlink" title="元素选择器(E)"></a>元素选择器(E)</h3><p>元素选择器，是css选择器中最常见而且最基本的选择器。元素选择器其实就是文档的元素，如html,body,p,div等等，比如我们这个demo：中元素包括了div,ul,li等。</p>
<blockquote>
<p>所有浏览器支持元素选择器(E)。</p>
</blockquote>
<h3 id="类选择器（-className）"><a href="#类选择器（-className）" class="headerlink" title="类选择器（.className）"></a>类选择器（.className）</h3><p>类选择器是以一独立于文档元素的方式来指定样式，使用类选择器之前需要在html元素上定义类名，换句话说需要保证类名在html标记中存在，这样才能选择类.</p>
<p>类选择器还可以结合元素选择器来使用，比如说，你文档中有好多个元素使用了类名“items”，但你只想在p元素这个类名上修改样式，那么你可以这样进行选择并加上相应的样式：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-18/84422641-file_1495112947197_1123b.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>上面代码只会对p元素并且是其有一个类名叫“items”。不符合这两个条件的都不会被选择。</p>
<blockquote>
<p>所有浏览器都支持类选择器，但多类选择器（.className1.className2）不被ie6支持。</p>
</blockquote>
<h3 id="id选择器（-ID）"><a href="#id选择器（-ID）" class="headerlink" title="id选择器（#ID）"></a>id选择器（#ID）</h3><p>ID选择器和上面说的类选择器是很相似的，在使用ID选择器之前也需要先在html文档中加注ID名称，这样在样式选择器中才能找到相对应的元素，不同的是ID选择器是一个页面中唯一的值，我们在类使用时是在相对应的类名前加上一个“.”号（.className）而id选择器是在名称前使用”#”如(#id)</p>
<blockquote>
<p>所有浏览器都支持ID选择器。</p>
</blockquote>
<p>那么什么时候采用id命名？什么时候采用类命名呢？我个人认为就是关键的一点就是具有唯一性使用id选择器；公用的，类似的使用类选择器。使用这两个选择器时，最好区别大小写。</p>
<h3 id="后代选择器（E-F）"><a href="#后代选择器（E-F）" class="headerlink" title="后代选择器（Ｅ Ｆ）"></a>后代选择器（Ｅ Ｆ）</h3><p>后代选择器也被称作包含选择器,所起作用就是可以选择某元素的后代元素，比如说:E F，前面E为祖先元素，Ｆ为后代元素，所表达的意思就是选择了Ｅ元素的所有后代Ｆ元素，请注意他们之间需要一个空格隔开。这里Ｆ不管是E元素的子元素或者是孙元素或者是更深层次的关系，都将被选中，换句话说，不论Ｆ在Ｅ中有多少层关系，都将被选中</p>
<blockquote>
<p>所有浏览器都支的后代选择器。</p>
</blockquote>
<h3 id="子元素选择器-E-gt-F"><a href="#子元素选择器-E-gt-F" class="headerlink" title="子元素选择器(E&gt;F)"></a>子元素选择器(E&gt;F)</h3><p>子元素选择器只能选择某元素的子元素，其中E为父元素，而F为子元素，其中E&gt;F所表示的是选择了Ｅ元素下的所有子元素Ｆ。这和后代选择器（Ｅ Ｆ）不一样，在后代选择器中Ｆ是Ｅ的后代元素，而子元素选择器Ｅ &gt; F，其中Ｆ仅仅是Ｅ的子元素而已.</p>
<blockquote>
<p>IE6不支持子元素选择器。</p>
</blockquote>
<h3 id="相邻兄弟元素选择器-E-F"><a href="#相邻兄弟元素选择器-E-F" class="headerlink" title="相邻兄弟元素选择器(E + F)"></a>相邻兄弟元素选择器(E + F)</h3><p>相邻兄弟选择器可以选择紧接在另一元素后的元素，而且他们具有一个相同的父元素，换句话说，EF两元素具有一个相同的父元素，而且Ｆ元素在Ｅ元素后面，而且相邻，这样我们就可以使用相邻兄弟元素选择器来选择Ｆ元素。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-18/9236488-file_1495113737227_e1c1.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>上面代码表示选择li的相邻元素li，我们这里一共有十个li，那么上面的代码选择了从第2个li到 10 个li，一共九个，请看效果：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-18/16838610-file_1495113763710_c0f7.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>因为上面的li+li其中第二li是第一li的相邻元素，第三个又是第二个相邻元素，因此第三个也被选择，依此类推，所以后面九个li都被选中了，如果我们换过一种方式来看，可能会更好的理解一点：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-18/51719156-file_1495113795711_12749.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>按照前面所讲的知识，这句代码很明显选择了li.active后面相邻的li元素，注意了和li.active后面相邻的元素仅只有一个的。如图：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-18/34688900-file_1495113839717_ecdf.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>IE6不支持这个选择器</p>
</blockquote>
<h3 id="通用兄弟选择器（E-F）"><a href="#通用兄弟选择器（E-F）" class="headerlink" title="通用兄弟选择器（Ｅ ~ Ｆ）"></a>通用兄弟选择器（Ｅ ~ Ｆ）</h3><p>通用兄弟元素选择器是CSS3新增加一种选择器，这种选择器将选择某元素后面的所有兄弟元素，他们也和相邻兄弟元素类似，需要在同一个父元素之中，换句话说，E和F元素是属于同一父元素之内，并且F元素在Ｅ元素之后，那么E ~ F 选择器将选择中所有Ｅ元素后面的Ｆ元素。比如下面的代码：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-18/78145827-file_1495113896135_12fea.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>上面的代码所表示的是，选择中了li.active 元素后面的所有兄弟元素li,如图所示：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-18/38663930-file_1495113915131_a8d0.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>通用兄弟选择器和相邻兄弟选择器极其相似，只不过，相邻兄弟选择器仅选择是元素的仅与其相邻的后面元素（选中的仅一个元素）；而通用兄弟元素选择器，选中的是元素相邻的后面兄弟元素，这样说起来可能会有迷糊，大家可以仔细看看其相邻兄弟的效果图。</p>
<blockquote>
<p>IE6不支持这种选择器的用法。</p>
</blockquote>
<h3 id="群组选择器（selector1-selector2-…-selectorN）"><a href="#群组选择器（selector1-selector2-…-selectorN）" class="headerlink" title="群组选择器（selector1,selector2,…,selectorN）"></a>群组选择器（selector1,selector2,…,selectorN）</h3><p>群组选择器是将具有相同样式的元素分组在一起，每个选择器之间使用逗号“，”隔开，如上面所示selector1,selector2,…,selectorN。这个逗号告诉浏览器，规则中包含多个不同的选择器，如果不有这个逗号，那么所表达的意就完全不同了，省去逗号就成了我们前面所说的后代选择器，这一点大家在使用中千万要小心加小心。我们来看一个简单的例子：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-18/60920941-file_1495114079236_1c67.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>因为li.first和li.last具有相同的样式效果，所以我们把他们写到一个组里来：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-18/39537588-file_1495114096573_d22b.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>所有浏览器都支持群组选择器。</p>
</blockquote>
<h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><p>属性选择器早在CSS2中就被引入了，其主要作用就是对带有指定属性的HTML 元素设置样式。使用CSS3属性选择器，你可以只指定元素的某个属性，或者你还可以同时指定元素的某个属性和其对应的属性值。CSS3的属性选择器主要包括以下几种：</p>
<p><code>E[attr]</code>：只使用属性名，但没有确定任何属性值；<br><code>E[attr=&quot;value&quot;]</code>：指定属性名，并指定了该属性的属性值；<br><code>E[attr~=&quot;value&quot;]</code>：指定属性名，并且具有属性值，此属性值是一个词列表，并且以空格隔开，其中词列表中包含了一个value词，而且等号前面的“〜”不能不写；<br><code>E[attr^=&quot;value&quot;]</code>：指定了属性名，并且有属性值，属性值是以value开头的；<br><code>E[attr$=&quot;value&quot;]</code>：指定了属性名，并且有属性值，而且属性值是以value结束的；<br><code>E[attr*=&quot;value&quot;]</code>：指定了属性名，并且有属性值，而且属值中包含了value；<br><code>E[attr|=&quot;value&quot;]</code>：指定了属性名，并且属性值是value或者以“value-”开头的值（比如说zh-cn）;</p>
<p>为了更好的说明CSS3属性选择器的使用方法，我们把第一节的demo换成别的结构，如下所示：</p>
{% image http://opolpcrco.bkt.clouddn.com/17-5-18/30487575-file_1495114314759_12082.png '' '' %}
<p>再加一点CSS美化后,下面就开始针对上面列出的每个属性选择器来，具体分析其使用方法。</p>
<h3 id="E-attr"><a href="#E-attr" class="headerlink" title="E[attr]"></a>E[attr]</h3><p>E[attr]属性选择器是CSS3属性选择器中最简单的一种。如果你希望选择有某个属性的元素，而不论这个属性值是什么，你就可以使用这个属性选择器，如：</p>
{% image http://opolpcrco.bkt.clouddn.com/17-5-18/18967267-file_1495114376981_4fe0.png '' '' %}
<p>上面代码所表示的，选择了div.demo下所有带有id属性的a元素，并在这个元素上使用背景色为兰色，前景色为黄色，字体加粗的样式，对照上面的html，我们不难发现，只有第一个和最后一个链接使用了id属性，所以选中了这两个a元素，效果如下所示：</p>
{% image http://opolpcrco.bkt.clouddn.com/17-5-18/86927423-file_1495114576494_774e.png '' '' %}
<blockquote>
<p>IE6不支持这个选择器。</p>
</blockquote>
<h3 id="E-attr-”value”"><a href="#E-attr-”value”" class="headerlink" title="Ｅ[attr=”value”]"></a>Ｅ[attr=”value”]</h3><p>E[attr=”value”]选择器和E[attr]选择器，从字面上就能很清楚的理解出来，E[attr=”value”]是指定了属性值“value”，而E[attr]只是选择了有对应的属性，并没有明确指其对应的属性值”value”，这也是这两种选择器的最大区是之处。从而缩小了选择 围，更能精确选择自己需要的元素，在前面实例基础上我们进行一下简单的修改：</p>
{% image http://opolpcrco.bkt.clouddn.com/17-5-18/45776259-file_1495114609686_e6f6.png '' '' %}
<p>和前面代码相比较，此处在id的属性基础上指定了相应的value值为“first”,这样一来我们选中的是div.demo中的a元素，并且这个元素有一个”id=”first””属性值，请看下在的效果图：</p>
{% image http://opolpcrco.bkt.clouddn.com/17-5-18/13169749-file_1495114725681_16d42.png '' '' %}
<p>E[attr=”value”]属性选择器也可以多个属性并写，进一步缩小选择范围</p>
<p>对于E[attr=”value”]这种属性值选择器有一点需要注意：属性和属性值必须完全匹配，特别是对于属性值是词列表的形式时，如：</p>
{% image http://opolpcrco.bkt.clouddn.com/17-5-18/74026612-file_1495114793214_1bcf.png '' '' %}
<p>例如上面的代码，如果你写成：</p>
{% image http://opolpcrco.bkt.clouddn.com/17-5-18/6491914-file_1495114847841_18530.png '' '' %}
<p>面的属性选择器并不会和上在的html匹配,因为他们的属性和属性值没有完全匹配，需要改成如下所示的代码，才能正确匹配：</p>
{% image http://opolpcrco.bkt.clouddn.com/17-5-18/17402346-file_1495114854197_11891.png '' '' %}
<blockquote>
<p>IE6浏览器不支持这种选择器。</p>
</blockquote>
<h3 id="E-attr-”value”-1"><a href="#E-attr-”value”-1" class="headerlink" title="E[attr~=”value”]"></a>E[attr~=”value”]</h3><p>↑ 的例子中, .demo a[class=’links’] 识别不了<code>class=&#39;links item&#39;</code> 这样的词列表,那如何才能写一个词,却能识别整个列表呢？这时，E[attr~=”value”]就派上用场了</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-18/52631857-file_1495115061071_110ea.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>上面代码表示的是，div.demo下的a元素的title属性中，只要其属性值中含有”website”这个词就会被选择，回头看看我们的html，不难发现所有a元素中“2，6，7，8”这四个a元素的title中都含有,所以被选中，请看效果：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-18/6421299-file_1495115094138_17606.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>IE6不支持E[attr~=”value”]属性选择器。</p>
</blockquote>
<h3 id="E-attr-”value”-2"><a href="#E-attr-”value”-2" class="headerlink" title="E[attr^=”value”]"></a>E[attr^=”value”]</h3><p>E[attr^=”value”]属性选择器，指的是选择attr属性值以“value”开头的所有元素，换句话说，选择的属性其以对应的属性值是以“value”开始的，一起来看个实例：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-18/60146725-file_1495115318738_6056.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>上面代码表示的是选择了以href属性，并且以”<a href="http://&quot;和&quot;mailto:&quot;开头的属性值的所有a元素，换过更简单一点的呢？只要a元素中的href属性值是以&quot;http://&quot;或&quot;mailto:&quot;开头的a元素都会以选中，那么下面大家请对照上面的html和下面的效果图，看看是不是那么一回事：" target="_blank" rel="external">http://&quot;和&quot;mailto:&quot;开头的属性值的所有a元素，换过更简单一点的呢？只要a元素中的href属性值是以&quot;http://&quot;或&quot;mailto:&quot;开头的a元素都会以选中，那么下面大家请对照上面的html和下面的效果图，看看是不是那么一回事：</a></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-18/64914015-file_1495115324890_db15.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>IE6不支持E[attr^=”value”]选择器。</p>
</blockquote>
<h3 id="E-attr-”value”-3"><a href="#E-attr-”value”-3" class="headerlink" title="E[attr$=”value”]"></a>E[attr$=”value”]</h3><p>Ｅ[attr$=”value”]属性选择器刚好与E[attr^=”value”]选择器相反，E[attr$=”value”]表示的是选择attr属性值以”value”结尾的所有元素，换句话说就是选择元素attr属性，并且他的属性值是以value结尾的，这个运用在给你一些特殊的链接加背景图片很方便的，比如说给pdf,png,doc等不同文件加上不同icon，我们就可以使用这个属性来实现，如：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-18/1051012-file_1495115370732_15985.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>上面代码表示的是，选择div.demo中元素有href属性，并以png值结尾的a元素。（正如上面所说，只不过这里使用的是改变元素的背景色），效果如下：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-18/25874969-file_1495115378332_de4.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>IE6不支持E[attr$=”value”]属性选择器。</p>
</blockquote>
<h3 id="E-attr-”value”-4"><a href="#E-attr-”value”-4" class="headerlink" title="E[attr*=”value”]"></a>E[attr*=”value”]</h3><p>E[attr*=”value”]属性选择器表示的是选择attr属性值中包含子串”value”的所有元素。也就是说，只要你所选择的属性，其属性值中有这个”value”值都将被选中，如：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-18/23541139-file_1495115424608_2c93.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>上面代码表示的是：选择了div.demo中a元素，而a元素的title属性中只要有”site”就符合选择条件。效果如下：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-18/69535345-file_1495115431536_174e7.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h3 id="E-attr-”value”-5"><a href="#E-attr-”value”-5" class="headerlink" title="E[attr|=”value”]"></a>E[attr|=”value”]</h3><p>E[attr|=”value”]是属性选择器中的最后一种，在说这个选择器使用之前先提醒大家attr后面的是一个竖线“｜”而不是l，小心搞错了。E[attr|=”value”]被称作为特定属性选择器。这个选择器会选择attr属性值等于value或以value-开头的所有元素,我们来看个实例：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-18/19906592-file_1495115467380_1f76.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>上面的代码会选中了div.demo中lang属性等于zh或以zh-开头的所有a元素，大家可以对照前面的html代友，其中”2,3,4,6”被选中，因为他们都有一个lang属性，并且他们的属性值都符合以”zh”或”zh-“开始的元素。具体效果如下：</p>
<p>所以这种属性选择器用来匹配以“女value-1”,”value-2”的属性是很方便的，比如说你页面中有很多图片，图片文件名都是以”figure-1”,”figure-2”这样的方式来命名的，那么使用这种选择器选中图片就很方便了，大家可以在本地尝试一下，这种属性选择器最常常用的地方是如上面的示例用来匹配语言。</p>
<blockquote>
<p>IE6不支持E[attr|=”value”]选择器。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CSS 选择器种类繁多,其中几个长得还比较像,如果有的属性用的不多,一会就忘记了,特别是CSS3中的:nth选择器,那么从现在开始从头一起来看看CSS选择器的运用。&lt;/p&gt;
&lt;p&gt;CSS是一种用于屏幕上渲染html，xml等一种语言，CSS主要是在相应的元素中应用样式，来渲
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>5.17面试总结</title>
    <link href="https://silkyer.github.io/2017/05/18/20170517post/"/>
    <id>https://silkyer.github.io/2017/05/18/20170517post/</id>
    <published>2017-05-18T05:05:50.952Z</published>
    <updated>2017-05-18T14:11:46.816Z</updated>
    
    <content type="html"><![CDATA[<p>这天参加了两个面试 上午在大新 下午在下沙 上午的面试收获要比下午多多了<br>先Mark上午面试的总结(这里只总结自己没回答好或者没回答上)</p>
<h2 id="ES6新增的箭头函数-作用是什么-和ES5相比-好处在哪"><a href="#ES6新增的箭头函数-作用是什么-和ES5相比-好处在哪" class="headerlink" title="ES6新增的箭头函数 作用是什么?和ES5相比 好处在哪"></a>ES6新增的箭头函数 作用是什么?和ES5相比 好处在哪</h2><p>回答这个问题之前,首先来看看这个问题:</p>
<h3 id="JS中this到底指向什么"><a href="#JS中this到底指向什么" class="headerlink" title="JS中this到底指向什么?"></a>JS中this到底指向什么?</h3><p>这是个老生常谈的问题了,网上一堆大牛给出了答案,概括来说分4中情况:</p>
<blockquote>
<p>this作为对象方法调用、作为函数调用、作为构造函数调用、apply或call调用。</p>
</blockquote>
<p>具体答案依然一搜一大堆,篇幅问题,且这里讲的是箭头函数,所以以 <code>this作为函数调用</code> 这一问题来分析</p>
<h4 id="this作为函数被调用时"><a href="#this作为函数被调用时" class="headerlink" title="this作为函数被调用时"></a>this作为函数被调用时</h4><p>函数也可以直接被调用，这个时候this被绑定到了全局对象。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ar x = 1;  </div><div class="line">　<span class="keyword">function</span> <span class="function"><span class="title">test</span></span>()&#123;  </div><div class="line">　　　this.x = 0;  </div><div class="line">　&#125;  </div><div class="line">　<span class="built_in">test</span>();  </div><div class="line">　alert(x); //this作为函数直接调用了!这里是语法糖有简写 输出为0</div></pre></td></tr></table></figure>
<p>但这样就会出现一些问题，就是在函数内部定义的函数，其this也会指向全局，而和我们希望的恰恰相反。代码如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var o = &#123;</div><div class="line">    x : 1,</div><div class="line">    func : <span class="function"><span class="title">function</span></span>() &#123; console.log(this.x) &#125;,</div><div class="line">    <span class="built_in">test</span> : <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">        <span class="built_in">set</span>Timeout(<span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">            this.func();</div><div class="line">        &#125;, 100);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">o.test(); // TypeError : this.func is not a <span class="keyword">function</span></div></pre></td></tr></table></figure>
<p>上面的代码会出现错误，因为this的指向从o变为了全局（函数调用中的this都是指向全局的）。我们需要修改上面的代码如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var o = &#123;</div><div class="line">    x : 1,</div><div class="line">    func : <span class="function"><span class="title">function</span></span>() &#123; console.log(this.x) &#125;,</div><div class="line">    <span class="built_in">test</span> : <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">        var _this = this;</div><div class="line">        <span class="built_in">set</span>Timeout(<span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">            _this.func(); </div><div class="line">        &#125;, 100);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">o.test();</div></pre></td></tr></table></figure>
<p>通过使用外部事先保存的this就行了</p>
<blockquote>
<p>(其实这个所谓的外部保存this就是第一种情况: <code>this作为对象被调用</code>,此时的this,就是指向o对象!)。</p>
</blockquote>
<p>这里就可以利用到箭头函数了，我们刚才说过，</p>
<blockquote>
<p>箭头函数的 this 始终指向函数定义时的 this，而非执行时</p>
</blockquote>
<p>也就是说,用了箭头函数,就省掉了用一个新的that去存外部this的指向了</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var o = &#123;</div><div class="line">    x : 1,</div><div class="line">    func : <span class="function"><span class="title">function</span></span>() &#123; console.log(this.x) &#125;,</div><div class="line">    <span class="built_in">test</span> : <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">        <span class="built_in">set</span>Timeout(() =&gt; &#123; this.func() &#125;, 100);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">o.test();</div></pre></td></tr></table></figure>
<p>PS: 测试表明,使用箭头函数,除了写法优雅以外,从性能上已经确定箭头函数比bind()快了</p>
<h2 id="什么是CDN（问题：加快网页加载速度手段）"><a href="#什么是CDN（问题：加快网页加载速度手段）" class="headerlink" title="什么是CDN（问题：加快网页加载速度手段）"></a>什么是CDN（问题：加快网页加载速度手段）</h2><p>CDN的全称是Content Delivery Network，即内容分发网络。</p>
<p>内容包括但不限于什么什么分布式存储、负载均衡、网络请求的重定向和内容管理4个技术性名词</p>
<p>总的来说就是尽可能避开互联网上有可能影响数据传输速度和稳定性的瓶颈和环节，使内容传输的更快、更稳定。解决网络拥挤的状况，提高用户访问网站的响应速度。</p>
<p>下面这则漫画简要的描述了CDN为何物和其作用：</p>
<p><a href="http://xiaoheiyang.baijia.baidu.com/article/126615" target="_blank" rel="external">http://xiaoheiyang.baijia.baidu.com/article/126615</a></p>
<h2 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h2><h3 id="为什么需要DNS解析域名为IP地址？"><a href="#为什么需要DNS解析域名为IP地址？" class="headerlink" title="为什么需要DNS解析域名为IP地址？"></a>为什么需要DNS解析域名为IP地址？</h3><p>网络通讯大部分是基于TCP/IP的，而TCP/IP是基于IP地址的，所以计算机在网络上进行通讯时只能识别如“202.96.134.133”之类的IP地址，而不能认识域名。我们无法记住10个以上IP地址的网站，所以我们访问网站时，更多的是在浏览器地址栏中输入域名，就能看到所需要的页面，这是因为有一个叫“DNS服务器”的计算机自动把我们的域名“翻译”成了相应的IP地址，然后调出IP地址所对应的网页。</p>
<h3 id="什么是DNS？"><a href="#什么是DNS？" class="headerlink" title="什么是DNS？"></a>什么是DNS？</h3><p>DNS( Domain Name System)是“域名系统”的英文缩写，是一种组织成域层次结构的计算机和网络服务命名系统，它用于TCP/IP网络，它所提供的服务是用来将主机名和域名转换为IP地址的工作。DNS就是这样的一位“翻译官”，它的基本工作原理可用下图来表示。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-18/96543683-file_1495101053717_1112d.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h3 id="DNS过程"><a href="#DNS过程" class="headerlink" title="DNS过程"></a>DNS过程</h3><p>DNS是应用层协议，事实上他是为其他应用层协议工作的，包括不限于HTTP和SMTP以及FTP，用于将用户提供的主机名解析为ip地址。</p>
<p>DNS 查询的过程如下图所示</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-18/38377719-file_1495101288804_dc8c.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>1、在浏览器中输入www  . qq  .com 域名，操作系统会先检查自己本地的hosts文件是否有这个网址映射关系，如果有，就先调用这个IP地址映射，完成域名解析。 </p>
<p>2、如果hosts里没有这个域名的映射，则查找本地DNS解析器缓存，是否有这个网址映射关系，如果有，直接返回，完成域名解析。</p>
<p>3、如果hosts与本地DNS解析器缓存都没有相应的网址映射关系，首先会找TCP/ip参数中设置的首选DNS服务器，在此我们叫它本地DNS服务器，此服务器收到查询时，如果要查询的域名，包含在本地配置区域资源中，则返回解析结果给客户机，完成域名解析，此解析具有权威性。</p>
<p>4、如果要查询的域名，不由本地DNS服务器区域解析，但该服务器已缓存了此网址映射关系，则调用这个IP地址映射，完成域名解析，此解析不具有权威性。</p>
<p>5、如果本地DNS服务器本地区域文件与缓存解析都失效，则根据本地DNS服务器的设置（是否设置转发器）进行查询，如果未用转发模式，本地DNS就把请求发至13台根DNS，根DNS服务器收到请求后会判断这个域名(.com)是谁来授权管理，并会返回一个负责该顶级域名服务器的一个IP。本地DNS服务器收到IP信息后，将会联系负责.com域的这台服务器。这台负责.com域的服务器收到请求后，如果自己无法解析，它就会找一个管理.com域的下一级DNS服务器地址(<a href="http://qq.com" target="_blank" rel="external">http://qq.com</a>) 给本地DNS服务器。当本地DNS服务器收到这个地址后，就会找 <a href="http://qq.com" target="_blank" rel="external">http://qq.com</a> 域服务器，重复上面的动作，进行查询，直至找到 www  . qq  .com 主机。</p>
<p>6、如果用的是转发模式，此DNS服务器就会把请求转发至上一级DNS服务器，由上一级服务器进行解析，上一级服务器如果不能解析，或找根DNS或把转请求转至上上级，以此循环。不管是本地DNS服务器用是是转发，还是根提示，最后都是把结果返回给本地DNS服务器，由此DNS服务器再返回给客户机。</p>
<p>详见： <a href="https://www.zhihu.com/question/23042131" target="_blank" rel="external">https://www.zhihu.com/question/23042131</a></p>
<h2 id="关于TCP-IP-四层协议"><a href="#关于TCP-IP-四层协议" class="headerlink" title="关于TCP/IP 四层协议"></a>关于TCP/IP 四层协议</h2><p>其实了解过后发现，想要理解DNS，其实也离不开TCP/IP。HTTP协议就属于TCP/IP协议家族中的一员，前端经常要接触HTTP,自然很有必要理解一下什么是TCP/IP</p>
<h3 id="什么是TCP-IP"><a href="#什么是TCP-IP" class="headerlink" title="什么是TCP/IP"></a>什么是TCP/IP</h3><p>两台机器之间该如何通信，就需要制定各种各样的协议了。例如：文件传输适用TCP协议。域名系统适用DNS协议。有了些协议的存在，各种数据流按照规则传输，计算机之间得以通信。</p>
<p>TCP/IP协议是一个协议集合。统称为TCP/IP。TCP/IP协议族中有一个重要的概念是分层，TCP/IP协议按照层次分为以下四层。应用层、传输层、网络层、数据链路层。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-18/22174238-file_1495102677700_109af.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h3 id="HTTP-关系密切的协议-IP、TCP-和-DNS"><a href="#HTTP-关系密切的协议-IP、TCP-和-DNS" class="headerlink" title="HTTP 关系密切的协议 : IP、TCP 和 DNS"></a>HTTP 关系密切的协议 : IP、TCP 和 DNS</h3><p>IP协议：IP(Internet protocol),这里的IP不是值得我们通常所说的192.168.1.1.这个IP指的是一种协议，而后面的数字值得是IP地址。IP协议的作用在于把各种数据包准确无误的传递给对方，其中两个重要的条件是IP地址，和MAC地址（Media Access Control Address）。由于IP地址是稀有资源，不可能每个人都拥有一个IP地址，所以我们通常的IP地址是路由器给我们生成的IP地址，路由器里面会记录我们的MAC地址。而MAC地址是全球唯一的，除去人为因素外不可能重复。举一个现实生活中的例子，IP地址就如同是我们居住小区的地址，而MAC地址就是我们住的那栋楼那个房间那个人。</p>
<p><img src="http://opolpcrco.bkt.clouddn.com/17-5-18/52784057-file_1495102760272_976a.png" alt=""></p>
<p>TCP协议：如果说IP协议是找到对方的详细地址。那么TCP协议就是把安全的把东西带给对方。各有分工，互不冲突。</p>
<p>按层次分，TCP属于传输层，提供可靠的字节流服务。什么叫字节流服务呢？所谓的字节流，其实就类似于信息切割。比如你是一个卖自行车的，你要去送货。安装好的自行车，太过庞大，又不稳定，容易损伤。不如直接把自行车拆开来，每个零件上都贴上收货人的姓名。最后送到后按照把属于同一个人的自行车再组装起来，这个拆解、运输、拼装的过程其实就是TCP字节流的过程。</p>
<p>为了确保信息能够确保准确无误的到达，TCP采用了著名的三次握手策略（three-way handshaking）</p>
<h3 id="访问一个网站，从输入url到最终打开成功经历的http流程"><a href="#访问一个网站，从输入url到最终打开成功经历的http流程" class="headerlink" title="访问一个网站，从输入url到最终打开成功经历的http流程"></a>访问一个网站，从输入url到最终打开成功经历的http流程</h3><p>(面试时回答得不好,下图解释得再清楚不过了)<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-18/52437010-file_1495102914552_dd31.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p>详情: <a href="http://www.cnblogs.com/roverliang/p/5176456.html" target="_blank" rel="external">http://www.cnblogs.com/roverliang/p/5176456.html</a></p>
<h2 id="CSS选择器以及预处理的作用"><a href="#CSS选择器以及预处理的作用" class="headerlink" title="CSS选择器以及预处理的作用"></a>CSS选择器以及预处理的作用</h2><p>篇幅太多,另起了一篇post,顺便简单列举和总结常用的一些选择器: <a href="https://silkyer.github.io/2017/05/18/CSS-selector/">https://silkyer.github.io/2017/05/18/CSS-selector/</a></p>
<p>面试时没回答上,其实大部分都用过,但是用的次数太少,很多选择器是用过一次,实现了功能后,就很少机会试用第二次了.时间一长就忘记了,通过这次面试让我意识到前端不仅仅是JS,HTML和CSS还有其他相关的很多基础知识也很重要的</p>
<h2 id="关于5-17号上午的面试"><a href="#关于5-17号上午的面试" class="headerlink" title="关于5.17号上午的面试"></a>关于5.17号上午的面试</h2><p>在大新地铁站附近,环境很好.重点是,我最最在意的面试环节,其中太多细节感动到泪流满面: </p>
<p>1、这家公司是我见过的唯一一家提前打印好简历的,并且面试官会很详细的聊你的简历、在你的简历上做笔记，自己的简历被认真对待是一件很窝心的事情。如果能跟这样的面试官一起共事，先不说技术，就这种认真的态度也对自己受益终生</p>
<p>2、面试时人事旁听，在我和技术面试的过程中，人事在旁边观察也算是一种考核，也省去了双方的再一次人事面试，足以证明他们对应聘者的重视程度。</p>
<p>3、面试官提问很有技巧，问题面面俱到，能根据我的回答抓住我擅长的领域，并深挖下去，这样给我感觉是能挖掘出应聘者的潜力</p>
<p>4、如果您能看到，真的很感谢您在面试过程中对我耐心地解答我的疑虑。</p>
<blockquote>
<p>再就是自己的不足了吧，除了上述的问题总结，在沟通过程中，由于自己面试失败次数太多，心态崩了，各种出糗。给人一种毛躁的印象。下一次面试的话，调整好自己的心态吧，命里无时莫强求。</p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这次的面试是我收获最大的一次面试，让我理解到，既然已经从事了IT这个行业，就势必要去了解下网络底层，虽然实际工作中这些东西用不到。高楼大厦，起于平川。不积跬步，无以至千里，不积小流，无以成江海。我现在的知识结构，就如同空中楼阁。稍微遇到高层次的问题，可能就理解不了了。一棵大树如果不在刚开始的时候深深的扎根，把所有的力量用到生长叶子开花上面。等到了大风来袭，互联网低潮的时候，一切来自不易的生活，就轻而易举的被倾覆。</p>
<p>理想是成为一个拥有渊博知识的人，拥有丰富的专业知识，足以应对工作中的难题。工作之余，博览群书，提升气质谈吐。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这天参加了两个面试 上午在大新 下午在下沙 上午的面试收获要比下午多多了&lt;br&gt;先Mark上午面试的总结(这里只总结自己没回答好或者没回答上)&lt;/p&gt;
&lt;h2 id=&quot;ES6新增的箭头函数-作用是什么-和ES5相比-好处在哪&quot;&gt;&lt;a href=&quot;#ES6新增的箭头函数-作用
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue2.0仿外卖APP（五）</title>
    <link href="https://silkyer.github.io/2017/05/16/web-app05/"/>
    <id>https://silkyer.github.io/2017/05/16/web-app05/</id>
    <published>2017-05-16T14:25:27.413Z</published>
    <updated>2017-05-16T15:02:49.830Z</updated>
    
    <content type="html"><![CDATA[<h2 id="header组件"><a href="#header组件" class="headerlink" title="header组件"></a>header组件</h2><h3 id="Vue-resource应用-当时的我还不知道axios"><a href="#Vue-resource应用-当时的我还不知道axios" class="headerlink" title="Vue-resource应用(当时的我还不知道axios..)"></a>Vue-resource应用(当时的我还不知道axios..)</h3><p><a href="https://github.com/pagekit/vue-resource" target="_blank" rel="external">https://github.com/pagekit/vue-resource</a></p>
<p>vue-resource是Vue.js的一款插件，它可以通过XMLHttpRequest或JSONP发起请求并处理响应。也就是说，$.ajax能做的事情，vue-resource插件一样也能做到，而且vue-resource的API更为简洁。另外，vue-resource还提供了非常有用的inteceptor功能，使用inteceptor可以在请求前和请求后附加一些行为，比如使用inteceptor在ajax请求时显示loading界面。</p>
<h3 id="vue-resource插件具有以下特点："><a href="#vue-resource插件具有以下特点：" class="headerlink" title="vue-resource插件具有以下特点："></a>vue-resource插件具有以下特点：</h3><h4 id="体积小"><a href="#体积小" class="headerlink" title="体积小"></a>体积小</h4><p>vue-resource非常小巧，在压缩以后只有大约12KB，服务端启用gzip压缩后只有4.5KB大小，这远比jQuery的体积要小得多。</p>
<h4 id="支持主流的浏览器"><a href="#支持主流的浏览器" class="headerlink" title="支持主流的浏览器"></a>支持主流的浏览器</h4><p>和Vue.js一样，vue-resource除了不支持IE 9以下的浏览器，其他主流的浏览器都支持。</p>
<h4 id="支持Promise-API和URI-Templates"><a href="#支持Promise-API和URI-Templates" class="headerlink" title="支持Promise API和URI Templates"></a>支持Promise API和URI Templates</h4><p>Promise是ES6的特性，Promise的中文含义为“先知”，Promise对象用于异步计算。<br>URI Templates表示URI模板，有些类似于ASP.NET MVC的路由模板。</p>
<h4 id="支持拦截器"><a href="#支持拦截器" class="headerlink" title="支持拦截器"></a>支持拦截器</h4><p>拦截器是全局的，拦截器可以在请求发送前和发送请求后做一些处理。<br>拦截器在一些场景下会非常有用，比如请求发送前在headers中设置access_token，或者在请求失败时，提供共通的处理方式。</p>
<blockquote>
<p>关于vue-resource更详细的介绍:<br><a href="http://www.cnblogs.com/keepfool/p/5657065.html" target="_blank" rel="external">http://www.cnblogs.com/keepfool/p/5657065.html</a></p>
</blockquote>
<h3 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-16/9501908-file_1494946096345_332e.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>如图,Header组件里的商家数据，是通过异步请求后端的数据接口获得的，header组件就负责接受这样的数据并渲染 。在app.vue组件（header的父组件），通过发送一个AJAX请求去获取商家的相关数据，取回来的数据放进app.vue里的<code>&lt;header&gt;</code>标签,然后这些数据通过header组件里的prop属性设置一下后,数据就在header组件里,就可以调用这些数据来做我们想做的事情</p>
<h2 id="父子组件间的通信"><a href="#父子组件间的通信" class="headerlink" title="父子组件间的通信"></a>父子组件间的通信</h2><p>组件意味着协同工作，通常父子组件会是这样的关系：组件 A 在它的模版中使用了组件 B 。它们之间必然需要相互通信：父组件要给子组件传递数据，子组件需要将它内部发生的事情告知给父组件。然而，在一个良好定义的接口中尽可能将父子组件解耦是很重要的。这保证了每个组件可以在相对隔离的环境中书写和理解，也大幅提高了组件的可维护性和可重用性。</p>
<p>在 Vue.js 中，父子组件的关系可以总结为 props down, events up 。父组件通过 props 向下传递数据给子组件，子组件通过 events 给父组件发送消息。看看它们是怎么工作的。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-16/60285371-file_1494946329211_2f7c.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h3 id="使用-Prop-传递数据"><a href="#使用-Prop-传递数据" class="headerlink" title="使用 Prop 传递数据"></a>使用 Prop 传递数据</h3><p>组件实例的作用域是孤立的。这意味着不能并且不应该在子组件的模板内直接引用父组件的数据。可以使用 props 把数据传给子组件。<br>prop 是父组件用来传递数据的一个自定义属性。子组件需要显式地用 props 选项声明 “prop”：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Vue.component(<span class="string">'child'</span>, &#123;</div><div class="line">  // 声明 props</div><div class="line">  props: [<span class="string">'message'</span>],</div><div class="line">  // 就像 data 一样，prop 可以用在模板内</div><div class="line">  // 同样也可以在 vm 实例中像 “this.message” 这样使用</div><div class="line">  template: <span class="string">'&lt;span&gt;&#123;&#123; message &#125;&#125;&lt;/span&gt;'</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>然后向它传入一个普通字符串：</p>
<blockquote>
<child message="hello!"></child>

</blockquote>
<p>结果输出“hello”。</p>
<p>回到项目中来</p>
<p>首先我们需要给app.vue定义一个seller的对象：可以通过data()方法。在vue.js中，这个data属性是一个函数（可查看链接），因为组件是可以被复用的，如果定义一个对象然后修改某一个组件的话会影响另外的组件，所以这里定义成一个函数。这个函数return一个对象，对象里面有seller对象，先定为空，然后我们通过发送AJAX请求去拿到一个seller对象，然后send给它。这样就可以拿到seller对象的数据。</p>
<p>Vue.js社区有个第三方插件：vue-resource，用来处理一些前后端请求数据交互的。</p>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  // GET /someUrl</div><div class="line">  this.<span class="variable">$http</span>.get(<span class="string">'/someUrl'</span>).then((response) =&gt; &#123;</div><div class="line">    // success callback</div><div class="line">  &#125;, (response) =&gt; &#123;</div><div class="line">    // error callback</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>同样的，需要在package.json添加它的依赖：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-16/31398266-file_1494946430454_6e52.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p>第三方插件import引用时需要注册，用Vue.use(vueResource)把这个注册。在main.js注册</p>
<p>然后回到app.vue，在这里我们需要通过一个vue.resource去发送一个AJAX请求，需要在什么时序去发起呢？</p>
<p>我们知道每个vue实例化的时候都有一个生命周期，其中有个钩子叫created().</p>
<blockquote>
<p>关于钩子：<br><a href="https://segmentfault.com/q/1010000004335505" target="_blank" rel="external">https://segmentfault.com/q/1010000004335505</a></p>
<p>关于实例的生命周期：<br><a href="https://cn.vuejs.org/v2/guide/instance.html#实例生命周期" target="_blank" rel="external">https://cn.vuejs.org/v2/guide/instance.html#实例生命周期</a> </p>
</blockquote>
<p>这是它的一个生命周期钩子函数，就是一个vue实例被生成后调用这个函数。一个vue实例被生成后还要绑定到某个html元素上，之后还要进行编译，然后再插入到document中。每一个阶段都会有一个钩子函数，方便开发者在不同阶段处理不同逻辑。</p>
<blockquote>
<p>一般可以在created函数中调用ajax获取页面初始化所需的数据,如下图:</p>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-16/23922088-file_1494946519227_13a9.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>去chrome的network查看,看到请求已经发出去了<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-16/60399181-file_1494946751754_183e8.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p>vue-resource就介绍完了，seller对象已经拿到，接下来就把seller对象传递给header组件，让header渲染即可。</p>
<p>这里还有一个坑!!<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-16/41239334-file_1494946833155_1343.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p>Vue-resource 1.0的时候,右侧的response就能直接拿到seller字段</p>
<p>但是2.0时,resource封装的方法变了,需要response.body,才能拿到seller,不加body,只会拿到一个Object</p>
<p>##</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;header组件&quot;&gt;&lt;a href=&quot;#header组件&quot; class=&quot;headerlink&quot; title=&quot;header组件&quot;&gt;&lt;/a&gt;header组件&lt;/h2&gt;&lt;h3 id=&quot;Vue-resource应用-当时的我还不知道axios&quot;&gt;&lt;a href=&quot;#V
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue2.0仿外卖APP（四）</title>
    <link href="https://silkyer.github.io/2017/05/16/web-app04/"/>
    <id>https://silkyer.github.io/2017/05/16/web-app04/</id>
    <published>2017-05-16T10:34:07.647Z</published>
    <updated>2017-05-16T14:25:16.451Z</updated>
    
    <content type="html"><![CDATA[<h2 id="组建拆分"><a href="#组建拆分" class="headerlink" title="组建拆分"></a>组建拆分</h2><p>先在static目录下引入reset.css</p>
<p>接着在index.html引入，并且设置移动端<code>&lt;meta&gt;</code>,viewport的</p>
<p>有时候由于eslint的检测功能,写js少一个冒号多一个空格都会频繁报错,这会让刚接触Vue或者对ES6不熟悉的人痛苦不堪,可以在上一节讲到的eslint相关配置处,把对应检测功能置零</p>
<p>如果不置零,下面这段代码就会报错:<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-16/8069189-file_1494931134935_dde4.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-16/98379974-file_1494931135057_9d64.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p>所以要到eslintrc.js去设置</p>
<p>现在的App.vue如下：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-16/38681868-file_1494931189650_fbb5.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br>然后我们编写组件来替换那三个区块。</p>
<p>创建header组件<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-16/21628972-file_1494931295181_fb1e.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br>将header引入到App.vue里面(注册)：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-16/89956498-file_1494931304813_1fca.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br>Components后面要有空格。</p>
<p>这里还要安装一个stylus-loader依赖，不然会报错。</p>
<p>这里提供一个依赖包的安装方法：到package.json，在里面添加所需要的最新版本的包，然后再cnpm install ，这样就可以添加到node_modules里面了，运行cnpm run dev。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-16/77535721-file_1494931493990_c38e.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p>基本的组件结构如下:<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-16/84253293-file_1494931494106_736.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<h2 id="Vue-router"><a href="#Vue-router" class="headerlink" title="Vue-router"></a>Vue-router</h2><p>因为在单页应用中，内容区块有三部分，所以这时候要用到路由vue-router</p>
<p><a href="http://router.vuejs.org/zh-cn/installation.html" target="_blank" rel="external">http://router.vuejs.org/zh-cn/installation.html</a></p>
<p>同样通过package.json来安装。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-16/94553020-file_1494931783933_caa1.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>vue-router的用法：<a href="http://router.vuejs.org/zh-cn/essentials/getting-started.html" target="_blank" rel="external">http://router.vuejs.org/zh-cn/essentials/getting-started.html</a></p>
<p>可以参考下面两个链接:</p>
<p>官网的写法：<a href="http://router.vuejs.org/zh-cn/essentials/getting-started.html" target="_blank" rel="external">http://router.vuejs.org/zh-cn/essentials/getting-started.html</a></p>
<p>参考：<a href="https://segmentfault.com/q/1010000007929093/a-1020000007929260" target="_blank" rel="external">https://segmentfault.com/q/1010000007929093/a-1020000007929260</a><br>(PS: 链接都是个人觉得在遇到困难时很好的解决思路,所以放上来供大家参考)</p>
<p>如果使用模块化机制编程，导入Vue和VueRouter，要调用 Vue.use(VueRouter)。在通过use()这个方法，相当于安装插件。</p>
<p>参照官网给的vue-router的过程：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">// 如果使用模块化机制编程，導入Vue和VueRouter，要调用 Vue.use(VueRouter)</div><div class="line"></div><div class="line">// 1. 定义（路由）组件。</div><div class="line">// 可以从其他文件 import 进来</div><div class="line">const Foo = &#123; template: <span class="string">'&lt;div&gt;foo&lt;/div&gt;'</span> &#125;</div><div class="line">const Bar = &#123; template: <span class="string">'&lt;div&gt;bar&lt;/div&gt;'</span> &#125;</div><div class="line"></div><div class="line">// 2. 定义路由</div><div class="line">// 每个路由应该映射一个组件。 其中<span class="string">"component"</span> 可以是</div><div class="line">// 通过 Vue.extend() 创建的组件构造器，</div><div class="line">// 或者，只是一个组件配置对象。</div><div class="line">// 我们晚点再讨论嵌套路由。</div><div class="line">const routes = [</div><div class="line">  &#123; path: <span class="string">'/foo'</span>, component: Foo &#125;,</div><div class="line">  &#123; path: <span class="string">'/bar'</span>, component: Bar &#125;</div><div class="line">]</div><div class="line"></div><div class="line">// 3. 创建 router 实例，然后传 `routes` 配置</div><div class="line">// 你还可以传别的配置参数, 不过先这么简单着吧。</div><div class="line">const router = new VueRouter(&#123;</div><div class="line">  routes // （缩写）相当于 routes: routes</div><div class="line">&#125;)</div><div class="line"></div><div class="line">// 4. 创建和挂载根实例。</div><div class="line">// 记得要通过 router 配置参数注入路由，</div><div class="line">// 从而让整个应用都有路由功能</div><div class="line">const app = new Vue(&#123;</div><div class="line">  router</div><div class="line">&#125;).<span class="variable">$mount</span>(<span class="string">'#app'</span>)</div><div class="line"></div><div class="line">// 现在，应用已经启动了！</div></pre></td></tr></table></figure>
<p>所以,main.js是这样的:<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-16/66883057-file_1494941644265_ac97.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<h2 id="1像素border实现"><a href="#1像素border实现" class="headerlink" title="1像素border实现"></a>1像素border实现</h2><p>border-bottom: 1px solid rgba(7, 17, 27, 0.1)</p>
<p>直接在.tab加这句话可以实现，但是在移动端看到的就不是这样的，因为手机端有个dpr的概念,电脑设置的1px不代表所有手机里面显示的都是1px:<br><a href="http://mobile.51cto.com/web-484304.htm" target="_blank" rel="external">http://mobile.51cto.com/web-484304.htm</a></p>
<p>总的来说就是: 想要在dpr=2的设备下显示1px,对于css而言,可认为border: 0.5px,因为这是retina下(dpr=2)下能显示的最小单位。</p>
<p>然而，无奈并不是所有手机浏览器都能识别border: 0.5px;，ios7以下，android等其他系统里，0.5px会被当成为0px处理，那么如何实现这0.5px呢？</p>
<p>由于项目中多处用到border1px,所以单独拿出来放到一个通用文件里: mixin.styl<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-16/51883552-file_1494944137711_dbca.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p>这只是通用文件,真正实现1px,关键是检测出设备dpr,从而进行缩放</p>
<p>没错就是媒体查询@media</p>
<p>把检测dpr这个功能单独隔离出一个base.styl<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-16/39849946-file_1494944343316_10e62.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p>所以为了使用border1px,则需要在使用的那个组件,同时@import (base.styl)和(mixin.styl),为了简洁,我们把这些需要单独引入的css文件,再放入一个总的styl文件: index.styl<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-16/56691572-file_1494944596411_c061.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p>至此,每一个需要用到border1px的地方,只需要:<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-16/9604161-file_1494944694524_d2a9.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p>总结一像素的实现：伪类+缩放（用一个class）</p>
<p>这样基本框架已经搭建好了，接下来就来开发组件。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;组建拆分&quot;&gt;&lt;a href=&quot;#组建拆分&quot; class=&quot;headerlink&quot; title=&quot;组建拆分&quot;&gt;&lt;/a&gt;组建拆分&lt;/h2&gt;&lt;p&gt;先在static目录下引入reset.css&lt;/p&gt;
&lt;p&gt;接着在index.html引入，并且设置移动端&lt;code&gt;&amp;lt
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue2.0仿外卖APP（三）</title>
    <link href="https://silkyer.github.io/2017/05/16/web-app03/"/>
    <id>https://silkyer.github.io/2017/05/16/web-app03/</id>
    <published>2017-05-16T10:12:00.256Z</published>
    <updated>2017-05-16T10:30:51.074Z</updated>
    
    <content type="html"><![CDATA[<h2 id="APP结构如下"><a href="#APP结构如下" class="headerlink" title="APP结构如下:"></a>APP结构如下:</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-16/63895726-file_1494929641181_94fe.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-16/70823900-file_1494929641368_a94b.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-16/48455974-file_1494929641511_39ed.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h3 id="项目资源准备"><a href="#项目资源准备" class="headerlink" title="项目资源准备"></a>项目资源准备</h3><p>准备项目的各种图片资源等等</p>
<p>注意：在webpack可以不用css sprite，直接用单张图片，因为它会帮忙打包。</p>
<p>还有SVG图片，放大之后不会影响质量，在移动端开发中，通常会把色彩单一的图片做成SVG图片。这些不是直接用，利用一些工具去把这些SVG图片去转化成一个叫图标字体的文件，就可以在CSS引用了。</p>
<h3 id="图标字体制作"><a href="#图标字体制作" class="headerlink" title="图标字体制作"></a>图标字体制作</h3><p>在项目开发前期，我们需要将设计师给的一些图片制作成字体图标</p>
<p>用一个叫IcoMoon的工具（<a href="https://icomoon.io/），它本身有的图标可以查看IcoMoon" target="_blank" rel="external">https://icomoon.io/），它本身有的图标可以查看IcoMoon</a> App，要用自定义图标的话可以在IcoMoon App里面点击Import Icons，将所有的SVG图片导入，就可以下载使用了。（里面的Get Code可以查看使用方法）。在下载之前可以点击左上角的preferences，设置一下名称：sell-icon</p>
<h3 id="项目目录设计"><a href="#项目目录设计" class="headerlink" title="项目目录设计"></a>项目目录设计</h3><p>所有代码都在src文件目录下</p>
<p>入口文件main.js；</p>
<p>整个页面的vue实例文件App.vue；</p>
<p>components：存放我们的组件文件，但我们不会像hello.vue一样直接放在里面，我们会多件一个子目录，像这样：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-16/70858233-file_1494929740581_12fd8.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p>这样做是因为一个vue组件除了它的.vue文件以外，还可能包含一个图片相关资源等等。之前说过，组件一个很重要的设计原则就是就近维护，把一个组件相关资源都放在一个目录下。</p>
<p>还要创建一个common目录，包好一个公共的模块和资源，再在它其中添加三个子目录。</p>
<p>在这儿项目中，我们使用的css预处理器是stylus。</p>
<p>结构如下图：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-16/94710955-file_1494929781060_69d6.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br>并且将图标字体生成的style.css添加到stylus目录下，并改名为icon.styl，并改为stylus语法：把括号和分号去掉。</p>
<p>把asset目录删掉。</p>
<h2 id="mock数据（模拟后台数据）"><a href="#mock数据（模拟后台数据）" class="headerlink" title="mock数据（模拟后台数据）"></a>mock数据（模拟后台数据）</h2><p>作为前端经常需要模拟后台数据，我们称之为mock。</p>
<p><a href="http://blog.csdn.net/sysuzjz/article/details/50317531" target="_blank" rel="external">http://blog.csdn.net/sysuzjz/article/details/50317531</a></p>
<p>mock 的真正意义在于简化测试环境。假如你现在要测试一个dao，但是你有不想构建数据库环境就可以用mock模拟数据库的返回结果。</p>
<p>数据来源：data.json<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-16/40072671-file_1494929832340_7438.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p>我们模拟的数据请求就是从这里面读取数据，接下来就来编写这些接口。</p>
<p>打开build目录-dev-server.js（就是我们开发的webpack打包的一个入口文件），打开之后使用express这个框架去指一个nodeserver，我们也可以用express-router来编写这些接口请求。</p>
<p>先拿到这些数据(data.json)：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var appData = require(<span class="string">'../data.json'</span>);</div><div class="line">var seller = appData.seller;</div><div class="line">var goods = appData.goods;</div><div class="line">var ratings = appData.ratings;</div></pre></td></tr></table></figure></p>
<p>编写路由，并编写接口：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">var apiRoutes = express.Router();</div><div class="line"></div><div class="line">apiRoutes.get(<span class="string">'/seller'</span>, <span class="keyword">function</span> (req, res) &#123;</div><div class="line">  res.json(&#123;</div><div class="line">    errno: 0,</div><div class="line">    data: seller</div><div class="line">  &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">apiRoutes.get(<span class="string">'/goods'</span>, <span class="keyword">function</span> (req, res) &#123;</div><div class="line">  res.json(&#123;</div><div class="line">    errno: 0,</div><div class="line">    data: goods</div><div class="line">  &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">apiRoutes.get(<span class="string">'/ratings'</span>, <span class="keyword">function</span> (req, res) &#123;</div><div class="line">  res.json(&#123;</div><div class="line">    errno: 0,</div><div class="line">    data: ratings</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>要在express使用它，我们需要调用express的变量app：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app.use(<span class="string">'/api'</span>, apiRoutes);</div></pre></td></tr></table></figure>
<p>这样我们就可以直接通过<code>/goods</code>来获取数据了。</p>
<p>完整的dev-server.js：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-16/96312509-file_1494930527681_144f1.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p>写完后要重新运行cnpm run dev，因为我们改的是node文件，然后<a href="http://localhost:8080/api/seller,如果能获取下面显示的数据,则代表数据获取成功" target="_blank" rel="external">http://localhost:8080/api/seller,如果能获取下面显示的数据,则代表数据获取成功</a><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-16/76637291-file_1494930638800_17dac.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;APP结构如下&quot;&gt;&lt;a href=&quot;#APP结构如下&quot; class=&quot;headerlink&quot; title=&quot;APP结构如下:&quot;&gt;&lt;/a&gt;APP结构如下:&lt;/h2&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue2.0仿外卖APP（二）</title>
    <link href="https://silkyer.github.io/2017/05/16/web-app02/"/>
    <id>https://silkyer.github.io/2017/05/16/web-app02/</id>
    <published>2017-05-16T06:21:07.692Z</published>
    <updated>2017-05-16T10:07:46.236Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue-cli开启vue-js项目"><a href="#Vue-cli开启vue-js项目" class="headerlink" title="Vue-cli开启vue.js项目"></a>Vue-cli开启vue.js项目</h2><p>github地址: <a href="https://github.com/vuejs/vue-cli" target="_blank" rel="external">https://github.com/vuejs/vue-cli</a></p>
<p>Vue.js开发利器vue-cli，是vue的脚手架工具。</p>
<p>在工地上，脚手架是工人搭建好的架子，能够帮助工人们作业；在技术圈，脚手架就是来帮助我们编写好基础的代码的工具。Vue-cli就是帮助我们写好vue.js基础代码的工具。</p>
<p>使用Vue.js，当你构建一个原型的时候，你所需要做的通常就是通过 <code>&lt;script&gt;</code> 把Vue.js引入进来，然后就完事了。但是真实情况往往不是这样的。当我们真正开发一个应用的时候，我们不可避免的会用到一大堆的工具，模块化、预处理器、热模块加载、代码校验和测试。这些工具对于一个需要长期维护的大型应用是必须的，但是项目初始化将会是让人痛苦的事情。这就是为什么我们做了 vue-cli ，让一个简单的命令行工具来帮助你快速的构建一个拥有强大构建能力的Vue.js项目。</p>
<p>可以说，它仅仅是为了初始化。</p>
<h3 id="使用方法-以下操作均在终端-git-进行"><a href="#使用方法-以下操作均在终端-git-进行" class="headerlink" title="使用方法(以下操作均在终端(git)进行):"></a>使用方法(以下操作均在终端(git)进行):</h3><p>// 安装vue-cli：Vue-cli是一个node包，所以要通过cnpm去安装</p>
<blockquote>
<p>cnpm install -g vue-cli</p>
</blockquote>
<p>// 使用vue-cli初始化项目</p>
<blockquote>
<p>vue init webpack my-project</p>
</blockquote>
<p>// 进入到目录</p>
<blockquote>
<p>cd my-project</p>
</blockquote>
<p>// 安装依赖，生成node_modules目录</p>
<blockquote>
<p>cnpm install</p>
</blockquote>
<p>// 开始运行</p>
<blockquote>
<p>cnpm run dev</p>
</blockquote>
<p>上面的这些命令会从 <a href="https://github.com/vuejs-templates" target="_blank" rel="external">vuejs-templates</a> 拉取模板并安装，然后用npm安装依赖，最后你只需要用个npm脚本启动就能开始开发了。</p>
<h3 id="使用vue-cli初始化项目"><a href="#使用vue-cli初始化项目" class="headerlink" title="使用vue-cli初始化项目"></a>使用vue-cli初始化项目</h3><p>vue init webpack my-project的语法为:</p>
<blockquote>
<p>vue init <template-name> <project-name></project-name></template-name></p>
</blockquote>
<p>Template-name就是模板名称：模板就是安装成功后给你自动生成的一个代码模板。</p>
<p>这些官方的模板存在的意义在于提供强大的项目构建能力，以至于用户可以尽可能快速的进行开发。然而能否真正的发挥作用还在于你如何组织你的代码和你使用的其他库。</p>
<p>所有的官方模板都可以在 <a href="https://github.com/vuejs-templates" target="_blank" rel="external">vuejs-templates organization</a>找到。如果有一个新的模板放在了这里，你可以直接就用 <code>vue init &lt;template-name&gt; &lt;project-name&gt;</code>使用。你也可以运行 vue list 命令来看看现在有哪些官方模板是现在可用的。</p>
<h3 id="模板分为三类"><a href="#模板分为三类" class="headerlink" title="模板分为三类"></a>模板分为三类</h3><h4 id="官方模板，就是我们通常用的"><a href="#官方模板，就是我们通常用的" class="headerlink" title="官方模板，就是我们通常用的"></a>官方模板，就是我们通常用的</h4><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-16/92531555-file_1494916672780_9edc.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>webpack与webpack-simple两种的区别在于webpack-simple 没有包括Eslint 检查功能等等功能，普通项目基本用webpack-simple 就足够了.</p>
<h4 id="自定义模板"><a href="#自定义模板" class="headerlink" title="自定义模板"></a>自定义模板</h4><blockquote>
<p>vue init username/repo my-project</p>
</blockquote>
<p>从自己的仓库去安装。</p>
<p>无论是官方模板还是自定义模板，它都是去GitHub repo里面安装的。比如webpack模板：</p>
<p><a href="https://github.com/vuejs-templates/webpack" target="_blank" rel="external">https://github.com/vuejs-templates/webpack</a></p>
<p>这就是webpack仓库的模板地址：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-16/69857513-file_1494916745714_7178.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br>点进去template这个目录：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-16/92005949-file_1494916823044_1080d.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br>这部分就是我们最终安装后会生成的代码。</p>
<p>Project-name：是安装后会在当前目录下生产一个名为project-name的一个目录，然后把它的模板、所有代码都自动生成到这个目录下。</p>
<h3 id="无处不在的Vue组件"><a href="#无处不在的Vue组件" class="headerlink" title="无处不在的Vue组件"></a>无处不在的Vue组件</h3><p>每一个模板都有自己的作用：基础版本用于快速构建原型，高级版本用于正式开发。这些模板有许多共同的功能，如都支持 *.vue 组件。这意味着任何第三方的Vue组件都可以随意使用，并且可以轻而易举的发布在npm上</p>
<h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><p>ESLint：<a href="http://eslint.org/docs/user-guide/configuring。在团队协作中，为避免低级" target="_blank" rel="external">http://eslint.org/docs/user-guide/configuring。在团队协作中，为避免低级</a> Bug、产出风格统一的代码，会预先制定编码规范。使用 Lint 工具和代码风格检测工具，则可以辅助编码规范执行，有效控制代码质量。</p>
<p><a href="http://www.tuicool.com/articles/7JZZJzn" target="_blank" rel="external">http://www.tuicool.com/articles/7JZZJzn</a></p>
<p>Karma+Mocha：<a href="https://github.com/karma-runner/karma-mocha。单元测试" target="_blank" rel="external">https://github.com/karma-runner/karma-mocha。单元测试</a></p>
<p>mocha是一个js的测试框架。Karma是一个驱动测试的Runner。也就是说，karma为测试框架准备运行环境，可以让这些测试在真正的浏览器里运行。</p>
<p>Nightwatch：<a href="http://nightwatchjs.org/。验收测试框架，使用Selenium" target="_blank" rel="external">http://nightwatchjs.org/。验收测试框架，使用Selenium</a> WebDriver API以将Web应用测试自动化。它提供了简单的语法，支持使用JavaScript和CSS选择器，来编写运行在Selenium服务器上的端到端测试。</p>
<h3 id="关于生成项目文件的介绍"><a href="#关于生成项目文件的介绍" class="headerlink" title="关于生成项目文件的介绍"></a>关于生成项目文件的介绍</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-16/34871440-file_1494916910097_ba6f.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>以下内容选自: <a href="http://blog.csdn.net/hongchh/article/details/55113751" target="_blank" rel="external">http://blog.csdn.net/hongchh/article/details/55113751</a></p>
<p>build目录和config目录：都是与webpack的配置相关。</p>
<p>node_modules目录：npm install安装的依赖代码库</p>
<p>src目录：存放项目源码</p>
<p>statis目录：存放一些第三方静态资源的。可以看到它里面只有一个.gitkeep文件，它的作用是当这个目录为空也可以把这个项目提交到git代码仓库里。因为通常如果你创建一个空目录，git会忽略掉这个目录，它是不会提交到仓库里的。</p>
<p>.babelrc文件：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-16/59380736-file_1494916947815_d6cc.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br>它是babel的一些配置。因为我们的代码都是ES6，而大部分浏览器都是还不支持的。所以通常我们的做法是将ES6通过babel编译成ES5，而.babelrc就是babel编译的一些配置。其中presets表示预设，[“es2015”, “stage-2”]表示babel转换预先需要安装的插件。我们可以在node_modules里面可以看到这两个插件。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-16/57654412-file_1494916967335_a377.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br><code>&quot;plugins&quot;: [&quot;transform-runtime&quot;]</code>：把ES6的方法做转换。</p>
<p><code>.editorconfig</code>文件：编辑器的配置<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-16/82515434-file_1494917052138_98ca.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br>分别是编码、缩进风格、缩进大小、换行符的风格、文件末尾插入新行、自动移除多余空格。</p>
<p><code>.eslintignore</code>文件：忽略语法检查的目录文件<br>{% image http://opolpcrco.bkt.clouddn.com/17-5-16/79534917-file_1494917086240_24e.png '' '' %}<br>表示不会对build目录下和config目录下中的js文件做ES语法检查。</p>
<p><code>.eslintrc.js</code>文件：Eslint的配置文件<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-16/23439141-file_1494917106915_13487.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<blockquote>
<p>在上图中<br>extends: ‘standard’：<br>表示继承一个标准的规则，可以在这里看到：<br><a href="https://github.com/feross/standard/blob/master/RULES.md#javascript-standard-style" target="_blank" rel="external">https://github.com/feross/standard/blob/master/RULES.md#javascript-standard-style</a><br>都是预先定义好的规则。</p>
</blockquote>
<p>我们也可以通过rules对一些具体的规则做修改。</p>
<p>比如：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-16/23439141-file_1494917106915_13487.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br>这里就修改了三个规则。配置成0就是不想要之前定义好的规则。</p>
<p><code>no-debugger</code>：做一个判断，如果是开发环境就可以debugger，是生产环境就不能，因为生产环境下debugger是非常危险的。</p>
<p><code>.gitignore</code>文件：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-16/82977245-file_1494917336733_a203.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br>就是git仓库去忽略掉这些文件或者目录，不会提交到代码里面。</p>
<p>Index.html文件：就是我们的入口html文件<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-16/61916886-file_1494917371302_bae9.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br>没有css，js文件，因为我们引用的资源会在我们的项目编译过程中自动插入到这个html文件中。</p>
<p>Package.json文件：项目的配置文件，用来描述一个项目。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-16/49316369-file_1494917411955_cd09.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br>运行”npm run dev”的时候执行的是build/dev-server.js文件，运行”npm run build”的时候执行（用来执行发布的）的是build/build.js文件，下面我们可以从这两个文件开始进行代码阅读分析。</p>
<p>Readme文件：项目的描述文件。</p>
<p>至此,Vue-cli初始化的文件就全部介绍完了</p>
<h2 id="项目运行"><a href="#项目运行" class="headerlink" title="项目运行"></a>项目运行</h2><p>上面介绍了目录里的文件,那这些文件是怎么执行的呢</p>
<p>先来看它的入口文件index.html</p>
<p>入口js文件是main.js<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-16/38736490-file_1494926875474_fd86.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p>依赖了两个vue库中的Vue、App.vue中对的App。</p>
<p>接着实例化一个Vue的实例，element挂载到”#app”上；模板是App；然后再用components注册一个当前App的插件，ES6的简写。也就是这个实例依赖App这个组件。</p>
<p>App.vue组件：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-16/38515883-file_1494927078778_72d2.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br>图中,用了一个<code>&lt;hello&gt;</code>标签,其实就是vue-cli初始化后的首页:Hello,Vue<br>同时也可以看到,注册了hello,才能以<code>&lt;hello&gt;</code>这样在HTML页面中使用</p>
<p><img src="http://opolpcrco.bkt.clouddn.com/17-5-16/61647258-file_1494927309812_1f7.png" alt=""></p>
<p><center>(这是页面请求到的文件资源)</center></p>
<p>app.js：打包后生成的代码；没有css，那时因为webpack在打包的时候也把css打包到js里面了。</p>
<p>可以看到：app.js接近1m，这么大是因为我们把那些ES6语法在运行时做一个解析。</p>
<p>所以接下来我们聊聊webpack</p>
<h3 id="webpack打包"><a href="#webpack打包" class="headerlink" title="webpack打包"></a>webpack打包</h3><p>Webpack：当前最火的前端构建工具。<a href="http://webpack.github.io/" target="_blank" rel="external">http://webpack.github.io/</a></p>
<p>Webpack的功能：把各种各样的前端资源编译打包，最终输出css,图片和js。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-16/84315366-file_1494927466902_11d8c.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>Webpack的配置很复杂,vue-cli已经帮我们完成了95%的配置工作</p>
<p>总结起来就是: 当文档最终生成一个app.js时，源码中并没有这个文件，这个就是因为webpack的编译,打包</p>
<h3 id="npm-run-dev-到底是什么"><a href="#npm-run-dev-到底是什么" class="headerlink" title="npm run dev 到底是什么?"></a>npm run dev 到底是什么?</h3><p>我们都知道,想运行一个Vue-cli初始化好的文件,预览效果,需要执行npm run dev ,那过程中到底发生了什么?</p>
<p>npm run dev其实就是执行了”node build/dev-server.js”这个命令，运行了build目录下的dev-server.js文件</p>
<p>这个文件首先是有各种依赖：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-16/92938134-file_1494927855738_167c3.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p><center>由上至下的语句分别: </center></p>
<p>Path就是node.js提供的API，提供一些文件路径操作的方法；</p>
<p>Express是node.js的一个框架，这里用它去启动一个webserver；</p>
<p>Webpack就是核心编译工具，直接用node.js提供的API，而不用全局的webpack；</p>
<p>proxyMiddleware就是HTTP代理的一个中间件，可以代理和转发API ;</p>
<p>WebpackConfig就是webpack的相关配置，这里由于是一个开发时的配置，所以它是依赖webpack.dev.conf。</p>
<p>看一下这个配置文件webpack.dev.conf：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-16/48069299-file_1494929139658_1657c.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br>除了刚刚提到的一些依赖，还有依赖一个webpack-merge，就是用来合并配置文件的；</p>
<p>Utils就是工具方法；</p>
<p>baseWebpackConfig也是一个webpack配置文件，它是被开发时的配置文件和运行时的配置文件所共享的；</p>
<p>HtmlWebpackPlugin就是webpack提供的一个操作HTML文件的一个插件。</p>
<p>Webpack.base.conf.js文件：定义webpack一些基础配置</p>
<p>Webpack.base.conf.js文件里面又有什么呢?<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-16/82117903-file_1494929197678_12fb0.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br>projectRoot定义了当前项目的根目录；</p>
<p>Module.exports = {这里面就是webpack的基本配置</p>
<p>  entry：一个入口配置。app: ‘./src/main.js’表示webpack编译的入口js文件</p>
<p>  Output：输出的配置。path是路径；filename输出的文件名名称</p>
<p>  Resolve：就是代码中request、import的一些相关配置。Extensions自动补全文件后缀名；fallback指向node_modules这个模块，也就是说当我们在前端request模块找不到的时候就可以在node_modules里面找；alias提供一些别名，也就是request路径中可以通过别名缩短书写。</p>
<p>  resolveLoader：里面的fallback跟上面类似。</p>
<p>  Module：preLoaders、loaders类似，对某种类型的文献应用某一个loader去做处理，webpack编译阶段就是利用各种loader对各种文件做编译。不同的文件利用不同的loader做处理。</p>
<p>  Eslint：formatter当eslint检查到错误的时候会有好地提示一个信息并且提供链接查看错误原因。</p>
<p>  Vue： 与css有关，utils里面</p>
<p>}</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Vue-cli开启vue-js项目&quot;&gt;&lt;a href=&quot;#Vue-cli开启vue-js项目&quot; class=&quot;headerlink&quot; title=&quot;Vue-cli开启vue.js项目&quot;&gt;&lt;/a&gt;Vue-cli开启vue.js项目&lt;/h2&gt;&lt;p&gt;github地址: 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue一些知识点</title>
    <link href="https://silkyer.github.io/2017/05/16/Vue%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>https://silkyer.github.io/2017/05/16/Vue一些知识点/</id>
    <published>2017-05-16T06:14:01.965Z</published>
    <updated>2017-05-16T06:19:25.989Z</updated>
    
    <content type="html"><![CDATA[<p>1、</p>
<p>使用组件时，大多数可以传入到 Vue 构造器中的选项可以在注册组件时使用，有一个例外： data 必须是函数。 实际上，如果你使用的不是函数，那么 Vue 会在控制台发出警告，告诉你在组件中 data 必须是一个函数。</p>
<p>下面的例子会让所有的组件都同时发生变化</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=<span class="string">"en"</span>&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">    &lt;title&gt;Document&lt;/title&gt;</div><div class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"vue.js"</span>&gt;&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;div id=<span class="string">"example-2"</span>&gt;</div><div class="line">  &lt;simple-counter&gt;&lt;/simple-counter&gt;</div><div class="line">  &lt;simple-counter&gt;&lt;/simple-counter&gt;</div><div class="line">  &lt;simple-counter&gt;&lt;/simple-counter&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">var data = &#123; counter: 0 &#125;</div><div class="line">Vue.component(<span class="string">'simple-counter'</span>, &#123;</div><div class="line">  template: <span class="string">'&lt;button v-on:click="counter += 1"&gt;&#123;&#123; counter &#125;&#125;&lt;/button&gt;'</span>,</div><div class="line">  // data 是一个函数，因此 Vue 不会警告，</div><div class="line">  // 但是我们为每一个组件返回了同一个对象引用</div><div class="line">  data: <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">    <span class="built_in">return</span> data</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line">new Vue(&#123;</div><div class="line">  el: <span class="string">'#example-2'</span></div><div class="line">&#125;)</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/body&gt; </div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>由于这三个组件共享了同一个 data ， 因此增加一个 counter 会影响所有组件！我们可以通过为每个组件返回新的 data 对象来解决这个问题：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">data: <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">  <span class="built_in">return</span> &#123;</div><div class="line">    counter: 0</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://cn.vuejs.org/v2/guide/components.html#data-必须是函数" target="_blank" rel="external">https://cn.vuejs.org/v2/guide/components.html#data-必须是函数</a><br><a href="https://segmentfault.com/q/1010000007910818?_ea=1490198" target="_blank" rel="external">https://segmentfault.com/q/1010000007910818?_ea=1490198</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1、&lt;/p&gt;
&lt;p&gt;使用组件时，大多数可以传入到 Vue 构造器中的选项可以在注册组件时使用，有一个例外： data 必须是函数。 实际上，如果你使用的不是函数，那么 Vue 会在控制台发出警告，告诉你在组件中 data 必须是一个函数。&lt;/p&gt;
&lt;p&gt;下面的例子会让所有的
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue2.0仿外卖APP（一）</title>
    <link href="https://silkyer.github.io/2017/05/15/web-app01/"/>
    <id>https://silkyer.github.io/2017/05/15/web-app01/</id>
    <published>2017-05-15T15:19:24.724Z</published>
    <updated>2017-05-16T03:59:06.325Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学习慕课网的课程：用vue.js做一个仿饿了么外卖APP的项目，现在也把流程啊什么的暂时先整理一下在这个博客上面。</p>
<p>当然，这个过程会有点长，不过确实能学到很多东西。</p>
<p>话不多说，马上开始吧。</p>
<p>注：当我们把用vue-cli脚手架搭建成的vue项目复制到其他地方时，要把node_modules目录删除，不然在其他地方无法执行cnpm run dev，这其中设计到路径的问题。删除之后要重新cnpm install。</p>
<blockquote>
<p><a href="https://segmentfault.com/q/1010000006912664" target="_blank" rel="external">https://segmentfault.com/q/1010000006912664</a></p>
<p><a href="https://www.zhihu.com/question/41409670?sort=created" target="_blank" rel="external">https://www.zhihu.com/question/41409670?sort=created</a></p>
</blockquote>
<h2 id="1-项目介绍"><a href="#1-项目介绍" class="headerlink" title="1.项目介绍"></a>1.项目介绍</h2><p>选用当前最火的MVVM框架作为这个项目的技术栈<br>MVVM架构：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-15/7937415-file_1494862122245_c931.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p>View和model通过viewModel来通信，但数据发生变化，viewmodel能够观察到这种数据的变化，然后通知到对应的视图做自动更新；当用户操作view视图，viewModel也能监听到视图的变化，然后通知数据做改动，实现了数据的双向绑定。</p>
<p>应用场景：</p>
<p>针对具有复杂交互逻辑的前端应用；</p>
<p>它可以提供基础的架构抽象；</p>
<p>可以通过AJAX数据持久化，保证前端用户体验</p>
<p>好处：</p>
<p>当前端和数据做一些操作的时候，可以通过AJAX请求对后端做数据持久化，不需要刷新整个页面，只需要改动DOM里需要改动的那部分数据。特别是移动端应用场景，刷新页面太昂贵，会重新加载很多资源，虽然有些会被缓存，但是页面的DOM,JS,CSS都会被页面重新解析一遍，因此移动端页面通常会做出SPA单页应用。</p>
<p>该项目只提取饿了么其中一个模块–商家模块进行开发</p>
<h3 id="项目开发的一个完整流程"><a href="#项目开发的一个完整流程" class="headerlink" title="项目开发的一个完整流程"></a>项目开发的一个完整流程</h3><p>项目的需求分析–脚手架工具–数据mock–架构设计–代码编写–自测–编译打包等方面完全简讲述开发一个web的全流程，更好地了解一个项目从0到1的过程。</p>
<h3 id="所需技术："><a href="#所需技术：" class="headerlink" title="所需技术："></a>所需技术：</h3><p>项目完整的开发流程；组件化、模块化的开发模式；使用Vue-cli脚手架初始化Vue.js项目；webpack的打包原理；模拟json后端数据，前后端分离开发；es6+eslint的开发方式。</p>
<h3 id="第三方组件："><a href="#第三方组件：" class="headerlink" title="第三方组件："></a>第三方组件：</h3><p>使用stylus编写模块化的CSS；使用vue-router开发单页应用；使用vue-resource与后端数据交互；在Vue.js框架里和第三方JS插件交互。</p>
<h2 id="关于Vue的数据驱动思想"><a href="#关于Vue的数据驱动思想" class="headerlink" title="关于Vue的数据驱动思想"></a>关于Vue的数据驱动思想</h2><p>在数据驱动的思想里，数据驱动DOM变化，DOM是数据的一种自然映射。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-15/20491526-file_1494862564539_6edb.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br>如果没有MVVM框架，数据和视图是如何交互的？</p>
<p>比如通过AJAX从后端获取数据，会让视图改变，通过手动触发DOM的改变；再比如我们通过前端交互改变一些数据，为了让视图也发生变化，仍然需要通过手动触发进行DOM改变。手动改变DOM不仅繁琐，还容易出错。用了vue之后就可以省去操作DOM变化的步骤了。</p>
<p>在vue.js中，可以通过directives指令去对DOM做一层封装，当数据发生变化，会通知指令去修改对应的DOM。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-15/25525927-file_1494863109212_18596.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br>Vue.js还会对操作做监听，当我们修改视图的时候，vue.js监听到这些变化，从而改变数据。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-15/26985719-file_1494863223718_b6b4.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br>(↑上面两幅图红色区域代表正在执行该逻辑)<br>这样就实现了数据的双向绑定。</p>
<h2 id="vue-js数据响应的原理"><a href="#vue-js数据响应的原理" class="headerlink" title="vue.js数据响应的原理"></a>vue.js数据响应的原理</h2><p>vue.js 是采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty()来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。</p>
<p>思路整理</p>
<p>已经了解到vue是通过数据劫持的方式来做数据绑定的，其中最核心的方法便是通过Object.defineProperty()来实现对属性的劫持，达到监听数据变动的目的，无疑这个方法是本文中最重要、最基础的内容之一，如果不熟悉defineProperty，猛戳→<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="external">这里</a></p>
<p>整理了一下，要实现mvvm的双向绑定，就必须要实现以下几点：<br>1、实现一个数据监听器Observer，能够对数据对象的所有属性进行监听，如有变动可拿到最新值并通知订阅者<br>2、实现一个指令解析器Compile，对每个元素节点的指令进行扫描和解析，根据指令模板替换数据，以及绑定相应的更新函数<br>3、实现一个Watcher，作为连接Observer和Compile的桥梁，能够订阅并收到每个属性变动的通知，执行指令绑定的相应回调函数，从而更新视图<br>4、mvvm入口函数，整合以上三者</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-15/57226083-file_1494863586565_920a.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>详情可查看: <a href="https://segmentfault.com/a/1190000006599500" target="_blank" rel="external">剖析Vue原理&amp;实现双向绑定MVVM</a> (先把app做出来,回头来研究)</p>
<h2 id="关于vue组件化的思想"><a href="#关于vue组件化的思想" class="headerlink" title="关于vue组件化的思想"></a>关于vue组件化的思想</h2><p>目的：拓展HTML元素，封装可重用代码</p>
<p>如下图：左侧是一个页面，被拆分成小的区块，每个区块对应一个组件，组件可以嵌套，最终组合成为一个完整页面。</p>
<p>在vue.js中，每个组件都对应一个viewModel，最终生成一个viewModel的树：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://opolpcrco.bkt.clouddn.com/17-5-15/26001293-file_1494863782367_266a.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<h3 id="组件化讲解"><a href="#组件化讲解" class="headerlink" title="组件化讲解"></a>组件化讲解</h3><p>一个简单的HTML页面，以此为基础：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">       &lt;html&gt;</div><div class="line">             &lt;head&gt;</div><div class="line">                   &lt;title&gt;揭开Vue组件的神秘面纱&lt;/title&gt;</div><div class="line">             &lt;/head&gt;</div><div class="line">       &lt;body&gt;</div><div class="line">             //这中间就是实例挂载点的实例边界</div><div class="line">             &lt;div id=<span class="string">"vueInstance"</span>&gt;&lt;/div&gt;</div><div class="line"></div><div class="line">             &lt;script src=<span class="string">"http://cdn.jsdelivr.net/vue/1.0.16/vue.js"</span>&gt;&lt;/script&gt;</div><div class="line"></div><div class="line">             &lt;script&gt;</div><div class="line">                   // 创建一个新的Vue实例，并设置挂载点</div><div class="line">                   var V = new Vue(&#123;</div><div class="line">                         el : <span class="string">'#vueInstance'</span></div><div class="line">                   &#125;);</div><div class="line">             &lt;/script&gt;</div><div class="line">       &lt;/body&gt;</div><div class="line"> &lt;/html&gt;</div></pre></td></tr></table></figure>
<p>在Vue中，可以使用Vue.component()来创建和注册你的组件，这个构造器有两个参数：组件的名字；包含组件参数的对象。</p>
<p>接下来注册一个组件。创建并传入两个参数：组件的名字:’mine’；包含组件参数的对象:这个对象包含一个属性’template’。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Vue.component(<span class="string">'mine'</span>,&#123;</div><div class="line">    template : <span class="string">'&lt;p&gt;My name is Appian.&lt;/p&gt;'</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>现在你已经有了自己的一个组件了，你可以在你的应用的任何地方使用它。只要你调用它的唯一标识(就是组件名字)，并用普通html标签的格式来书写，比如<mine></mine>，组件上注册的内容就会在你的自定义标签的地方插入。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=<span class="string">"en"</span>&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">    &lt;title&gt;vue组件&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;div id=<span class="string">"vueInstance"</span>&gt;</div><div class="line">        &lt;mine&gt;&lt;/mine&gt;   </div><div class="line">        &lt;mine&gt;&lt;/mine&gt;</div><div class="line">        &lt;mine&gt;&lt;/mine&gt;   </div><div class="line">     &lt;/div&gt;</div><div class="line">    &lt;script src=<span class="string">"http://cdn.jsdelivr.net/vue/1.0.16/vue.js"</span>&gt;&lt;/script&gt;</div><div class="line">     &lt;script&gt;</div><div class="line">        Vue.component(<span class="string">'mine'</span>,&#123;   //这里就是注册的内容</div><div class="line">            template : <span class="string">'&lt;p&gt;My name is Vue.&lt;/p&gt;'</span></div><div class="line">        &#125;);</div><div class="line">       // 创建一个新的Vue实例，并设置挂载点</div><div class="line">       var V = new Vue(&#123;</div><div class="line">             el : <span class="string">'#vueInstance'</span></div><div class="line">       &#125;);</div><div class="line">     &lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h3 id="利用template标签处理复杂组件"><a href="#利用template标签处理复杂组件" class="headerlink" title="利用template标签处理复杂组件"></a>利用template标签处理复杂组件</h3><p>如果总是在vue.component()构造器里写html代码，复杂页面就不得了了。为了避免上面的这种情况，所以我们可以用template标签（注意属性和标签是不一样的）来达到我们的目的。我们可以在页面的任何地方，定义template标签，并在template标签内，写好我们的模板。</p>
<blockquote>
<p>因为template标签在页面加载的时候不会渲染出来，只有在我们需要它的时候，这个标签内的内容才会被渲染出来。所以，你可以把template标签放在任何地方，并给它一个id，以便在组件注册的时候能够找到模板。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=<span class="string">"en"</span>&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">    &lt;title&gt;vue组件&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;div id=<span class="string">"vueInstance"</span>&gt;</div><div class="line">        &lt;mine&gt;&lt;/mine&gt;     </div><div class="line">     &lt;/div&gt;</div><div class="line"></div><div class="line">    &lt;template id=<span class="string">"myVue"</span>&gt;</div><div class="line">        &lt;p&gt;i am vue&lt;/p&gt;</div><div class="line">        &lt;p&gt;welcome!&lt;/p&gt;</div><div class="line">    &lt;/template&gt;</div><div class="line"></div><div class="line">    &lt;script src=<span class="string">"http://cdn.jsdelivr.net/vue/1.0.16/vue.js"</span>&gt;&lt;/script&gt;</div><div class="line">     &lt;script&gt;</div><div class="line">        Vue.component(<span class="string">'mine'</span>,&#123;   //这里就是注册的内容</div><div class="line">            template : <span class="string">'#myVue'</span></div><div class="line">        &#125;);</div><div class="line">       // 创建一个新的Vue实例，并设置挂载点</div><div class="line">       var V = new Vue(&#123;</div><div class="line">             el : <span class="string">'#vueInstance'</span></div><div class="line">       &#125;);</div><div class="line">     &lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h3 id="通过props向组件中传递数据"><a href="#通过props向组件中传递数据" class="headerlink" title="通过props向组件中传递数据"></a>通过props向组件中传递数据</h3><p>Vue是处理父组件向子组件中传递数据是通过props。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Vue.component(<span class="string">'mine'</span>,&#123;</div><div class="line">    template : <span class="string">'&lt;p&gt;Appian is from &#123;&#123; city &#125;&#125;.&lt;/p&gt;'</span>,</div><div class="line">    props : [<span class="string">'city'</span>]</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>props可以是数组，也可以是对象。</p>
<p>那父组件那里又是怎么指派字段给子组件的呢？</p>
<p>只需要在对应的标签内写下属性就好</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;mine city=<span class="string">"welcome"</span>&gt;&lt;/mine&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在学习慕课网的课程：用vue.js做一个仿饿了么外卖APP的项目，现在也把流程啊什么的暂时先整理一下在这个博客上面。&lt;/p&gt;
&lt;p&gt;当然，这个过程会有点长，不过确实能学到很多东西。&lt;/p&gt;
&lt;p&gt;话不多说，马上开始吧。&lt;/p&gt;
&lt;p&gt;注：当我们把用vue-cli脚手架搭
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://silkyer.github.io/2017/05/13/hello-world/"/>
    <id>https://silkyer.github.io/2017/05/13/hello-world/</id>
    <published>2017-05-13T06:07:47.892Z</published>
    <updated>2017-05-13T06:07:47.925Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
